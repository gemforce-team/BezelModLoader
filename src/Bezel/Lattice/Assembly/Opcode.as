package Bezel.Lattice.Assembly
{
	
	// values taken from RABCDAsm
	public class Opcode
	{
		public static const OP_db:Opcode                 = new Opcode(0x00, "db", new <OpcodeArgumentType>[OpcodeArgumentType.UByteLiteral], new OpcodeConstructorBlocker());
		public static const OP_bkpt:Opcode               = new Opcode(0x01, "bkpt", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_nop:Opcode                = new Opcode(0x02, "nop", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_throw:Opcode              = new Opcode(0x03, "throw", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getsuper:Opcode           = new Opcode(0x04, "getsuper", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_setsuper:Opcode           = new Opcode(0x05, "setsuper", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_dxns:Opcode               = new Opcode(0x06, "dxns", new <OpcodeArgumentType>[OpcodeArgumentType.String], new OpcodeConstructorBlocker());
		public static const OP_dxnslate:Opcode           = new Opcode(0x07, "dxnslate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_kill:Opcode               = new Opcode(0x08, "kill", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_label:Opcode              = new Opcode(0x09, "label", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_0x0A:Opcode               = new Opcode(0x0A, "0x0A", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x0B:Opcode               = new Opcode(0x0B, "0x0B", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_ifnlt:Opcode              = new Opcode(0x0C, "ifnlt", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifnle:Opcode              = new Opcode(0x0D, "ifnle", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifngt:Opcode              = new Opcode(0x0E, "ifngt", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifnge:Opcode              = new Opcode(0x0F, "ifnge", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_jump:Opcode               = new Opcode(0x10, "jump", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_iftrue:Opcode             = new Opcode(0x11, "iftrue", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_iffalse:Opcode            = new Opcode(0x12, "iffalse", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifeq:Opcode               = new Opcode(0x13, "ifeq", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifne:Opcode               = new Opcode(0x14, "ifne", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_iflt:Opcode               = new Opcode(0x15, "iflt", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifle:Opcode               = new Opcode(0x16, "ifle", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifgt:Opcode               = new Opcode(0x17, "ifgt", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifge:Opcode               = new Opcode(0x18, "ifge", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifstricteq:Opcode         = new Opcode(0x19, "ifstricteq", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_ifstrictne:Opcode         = new Opcode(0x1A, "ifstrictne", new <OpcodeArgumentType>[OpcodeArgumentType.JumpTarget], new OpcodeConstructorBlocker());
		public static const OP_lookupswitch:Opcode       = new Opcode(0x1B, "lookupswitch", new <OpcodeArgumentType>[OpcodeArgumentType.SwitchDefaultTarget, OpcodeArgumentType.SwitchTargets], new OpcodeConstructorBlocker());
		public static const OP_pushwith:Opcode           = new Opcode(0x1C, "pushwith", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_popscope:Opcode           = new Opcode(0x1D, "popscope", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_nextname:Opcode           = new Opcode(0x1E, "nextname", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_hasnext:Opcode            = new Opcode(0x1F, "hasnext", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushnull:Opcode           = new Opcode(0x20, "pushnull", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushundefined:Opcode      = new Opcode(0x21, "pushundefined", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushuninitialized:Opcode  = new Opcode(0x22, "pushuninitialized", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_nextvalue:Opcode          = new Opcode(0x23, "nextvalue", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushbyte:Opcode           = new Opcode(0x24, "pushbyte", new <OpcodeArgumentType>[OpcodeArgumentType.ByteLiteral], new OpcodeConstructorBlocker());
		public static const OP_pushshort:Opcode          = new Opcode(0x25, "pushshort", new <OpcodeArgumentType>[OpcodeArgumentType.IntLiteral], new OpcodeConstructorBlocker());
		public static const OP_pushtrue:Opcode           = new Opcode(0x26, "pushtrue", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushfalse:Opcode          = new Opcode(0x27, "pushfalse", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushnan:Opcode            = new Opcode(0x28, "pushnan", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pop:Opcode                = new Opcode(0x29, "pop", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_dup:Opcode                = new Opcode(0x2A, "dup", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_swap:Opcode               = new Opcode(0x2B, "swap", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushstring:Opcode         = new Opcode(0x2C, "pushstring", new <OpcodeArgumentType>[OpcodeArgumentType.String], new OpcodeConstructorBlocker());
		public static const OP_pushint:Opcode            = new Opcode(0x2D, "pushint", new <OpcodeArgumentType>[OpcodeArgumentType.Int], new OpcodeConstructorBlocker());
		public static const OP_pushuint:Opcode           = new Opcode(0x2E, "pushuint", new <OpcodeArgumentType>[OpcodeArgumentType.UInt], new OpcodeConstructorBlocker());
		public static const OP_pushdouble:Opcode         = new Opcode(0x2F, "pushdouble", new <OpcodeArgumentType>[OpcodeArgumentType.Double], new OpcodeConstructorBlocker());
		public static const OP_pushscope:Opcode          = new Opcode(0x30, "pushscope", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_pushnamespace:Opcode      = new Opcode(0x31, "pushnamespace", new <OpcodeArgumentType>[OpcodeArgumentType.Namespace], new OpcodeConstructorBlocker());
		public static const OP_hasnext2:Opcode           = new Opcode(0x32, "hasnext2", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_pushdecimal:Opcode        = new Opcode(0x33, "pushdecimal", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_pushdnan:Opcode           = new Opcode(0x34, "pushdnan", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_li8:Opcode                = new Opcode(0x35, "li8", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_li16:Opcode               = new Opcode(0x36, "li16", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_li32:Opcode               = new Opcode(0x37, "li32", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_lf32:Opcode               = new Opcode(0x38, "lf32", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_lf64:Opcode               = new Opcode(0x39, "lf64", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_si8:Opcode                = new Opcode(0x3A, "si8", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_si16:Opcode               = new Opcode(0x3B, "si16", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_si32:Opcode               = new Opcode(0x3C, "si32", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_sf32:Opcode               = new Opcode(0x3D, "sf32", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_sf64:Opcode               = new Opcode(0x3E, "sf64", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_0x3F:Opcode               = new Opcode(0x3F, "0x3F", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_newfunction:Opcode        = new Opcode(0x40, "newfunction", new <OpcodeArgumentType>[OpcodeArgumentType.Method], new OpcodeConstructorBlocker());
		public static const OP_call:Opcode               = new Opcode(0x41, "call", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_construct:Opcode          = new Opcode(0x42, "construct", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callmethod:Opcode         = new Opcode(0x43, "callmethod", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callstatic:Opcode         = new Opcode(0x44, "callstatic", new <OpcodeArgumentType>[OpcodeArgumentType.Method, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callsuper:Opcode          = new Opcode(0x45, "callsuper", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callproperty:Opcode       = new Opcode(0x46, "callproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_returnvoid:Opcode         = new Opcode(0x47, "returnvoid", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_returnvalue:Opcode        = new Opcode(0x48, "returnvalue", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_constructsuper:Opcode     = new Opcode(0x49, "constructsuper", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_constructprop:Opcode      = new Opcode(0x4A, "constructprop", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callsuperid:Opcode        = new Opcode(0x4B, "callsuperid", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_callproplex:Opcode        = new Opcode(0x4C, "callproplex", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callinterface:Opcode      = new Opcode(0x4D, "callinterface", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_callsupervoid:Opcode      = new Opcode(0x4E, "callsupervoid", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_callpropvoid:Opcode       = new Opcode(0x4F, "callpropvoid", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_sxi1:Opcode               = new Opcode(0x50, "sxi1", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_sxi8:Opcode               = new Opcode(0x51, "sxi8", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_sxi16:Opcode              = new Opcode(0x52, "sxi16", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_applytype:Opcode          = new Opcode(0x53, "applytype", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_0x54:Opcode               = new Opcode(0x54, "0x54", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_newobject:Opcode          = new Opcode(0x55, "newobject", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_newarray:Opcode           = new Opcode(0x56, "newarray", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_newactivation:Opcode      = new Opcode(0x57, "newactivation", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_newclass:Opcode           = new Opcode(0x58, "newclass", new <OpcodeArgumentType>[OpcodeArgumentType.Class], new OpcodeConstructorBlocker());
		public static const OP_getdescendants:Opcode     = new Opcode(0x59, "getdescendants", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_newcatch:Opcode           = new Opcode(0x5A, "newcatch", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker()); // ExceptionInfo index
		public static const OP_deldescendants:Opcode     = new Opcode(0x5B, "deldescendants", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x5C:Opcode               = new Opcode(0x5C, "0x5C", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_findpropstrict:Opcode     = new Opcode(0x5D, "findpropstrict", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_findproperty:Opcode       = new Opcode(0x5E, "findproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_finddef:Opcode            = new Opcode(0x5F, "finddef", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_getlex:Opcode             = new Opcode(0x60, "getlex", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_setproperty:Opcode        = new Opcode(0x61, "setproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_getlocal:Opcode           = new Opcode(0x62, "getlocal", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_setlocal:Opcode           = new Opcode(0x63, "setlocal", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_getglobalscope:Opcode     = new Opcode(0x64, "getglobalscope", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getscopeobject:Opcode     = new Opcode(0x65, "getscopeobject", new <OpcodeArgumentType>[OpcodeArgumentType.UByteLiteral], new OpcodeConstructorBlocker());
		public static const OP_getproperty:Opcode        = new Opcode(0x66, "getproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_getpropertylate:Opcode    = new Opcode(0x67, "getpropertylate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_initproperty:Opcode       = new Opcode(0x68, "initproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_setpropertylate:Opcode    = new Opcode(0x69, "setpropertylate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_deleteproperty:Opcode     = new Opcode(0x6A, "deleteproperty", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_deletepropertylate:Opcode = new Opcode(0x6B, "deletepropertylate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getslot:Opcode            = new Opcode(0x6C, "getslot", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_setslot:Opcode            = new Opcode(0x6D, "setslot", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_getglobalslot:Opcode      = new Opcode(0x6E, "getglobalslot", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_setglobalslot:Opcode      = new Opcode(0x6F, "setglobalslot", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_convert_s:Opcode          = new Opcode(0x70, "convert_s", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_esc_xelem:Opcode          = new Opcode(0x71, "esc_xelem", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_esc_xattr:Opcode          = new Opcode(0x72, "esc_xattr", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_i:Opcode          = new Opcode(0x73, "convert_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_u:Opcode          = new Opcode(0x74, "convert_u", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_d:Opcode          = new Opcode(0x75, "convert_d", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_b:Opcode          = new Opcode(0x76, "convert_b", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_o:Opcode          = new Opcode(0x77, "convert_o", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_checkfilter:Opcode        = new Opcode(0x78, "checkfilter", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_convert_m:Opcode          = new Opcode(0x79, "convert_m", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_convert_m_p:Opcode        = new Opcode(0x7A, "convert_m_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x7B:Opcode               = new Opcode(0x7B, "0x7B", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x7C:Opcode               = new Opcode(0x7C, "0x7C", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x7D:Opcode               = new Opcode(0x7D, "0x7D", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x7E:Opcode               = new Opcode(0x7E, "0x7E", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x7F:Opcode               = new Opcode(0x7F, "0x7F", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_coerce:Opcode             = new Opcode(0x80, "coerce", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_coerce_b:Opcode           = new Opcode(0x81, "coerce_b", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_coerce_a:Opcode           = new Opcode(0x82, "coerce_a", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_coerce_i:Opcode           = new Opcode(0x83, "coerce_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_coerce_d:Opcode           = new Opcode(0x84, "coerce_d", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_coerce_s:Opcode           = new Opcode(0x85, "coerce_s", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_astype:Opcode             = new Opcode(0x86, "astype", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_astypelate:Opcode         = new Opcode(0x87, "astypelate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_coerce_u:Opcode           = new Opcode(0x88, "coerce_u", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_coerce_o:Opcode           = new Opcode(0x89, "coerce_o", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x8A:Opcode               = new Opcode(0x8A, "0x8A", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x8B:Opcode               = new Opcode(0x8B, "0x8B", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x8C:Opcode               = new Opcode(0x8C, "0x8C", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x8D:Opcode               = new Opcode(0x8D, "0x8D", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x8E:Opcode               = new Opcode(0x8E, "0x8E", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_negate_p:Opcode           = new Opcode(0x8F, "negate_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_negate:Opcode             = new Opcode(0x90, "negate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_increment:Opcode          = new Opcode(0x91, "increment", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_inclocal:Opcode           = new Opcode(0x92, "inclocal", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_decrement:Opcode          = new Opcode(0x93, "decrement", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_declocal:Opcode           = new Opcode(0x94, "declocal", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_typeof:Opcode             = new Opcode(0x95, "typeof", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_not:Opcode                = new Opcode(0x96, "not", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_bitnot:Opcode             = new Opcode(0x97, "bitnot", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_0x98:Opcode               = new Opcode(0x98, "0x98", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0x99:Opcode               = new Opcode(0x99, "0x99", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_concat:Opcode             = new Opcode(0x9A, "concat", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_add_d:Opcode              = new Opcode(0x9B, "add_d", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_increment_p:Opcode        = new Opcode(0x9C, "increment_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_inclocal_p:Opcode         = new Opcode(0x9D, "inclocal_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_decrement_p:Opcode        = new Opcode(0x9E, "decrement_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_declocal_p:Opcode         = new Opcode(0x9F, "declocal_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_add:Opcode                = new Opcode(0xA0, "add", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_subtract:Opcode           = new Opcode(0xA1, "subtract", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_multiply:Opcode           = new Opcode(0xA2, "multiply", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_divide:Opcode             = new Opcode(0xA3, "divide", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_modulo:Opcode             = new Opcode(0xA4, "modulo", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_lshift:Opcode             = new Opcode(0xA5, "lshift", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_rshift:Opcode             = new Opcode(0xA6, "rshift", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_urshift:Opcode            = new Opcode(0xA7, "urshift", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_bitand:Opcode             = new Opcode(0xA8, "bitand", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_bitor:Opcode              = new Opcode(0xA9, "bitor", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_bitxor:Opcode             = new Opcode(0xAA, "bitxor", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_equals:Opcode             = new Opcode(0xAB, "equals", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_strictequals:Opcode       = new Opcode(0xAC, "strictequals", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_lessthan:Opcode           = new Opcode(0xAD, "lessthan", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_lessequals:Opcode         = new Opcode(0xAE, "lessequals", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_greaterthan:Opcode        = new Opcode(0xAF, "greaterthan", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_greaterequals:Opcode      = new Opcode(0xB0, "greaterequals", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_instanceof:Opcode         = new Opcode(0xB1, "instanceof", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_istype:Opcode             = new Opcode(0xB2, "istype", new <OpcodeArgumentType>[OpcodeArgumentType.Multiname], new OpcodeConstructorBlocker());
		public static const OP_istypelate:Opcode         = new Opcode(0xB3, "istypelate", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_in:Opcode                 = new Opcode(0xB4, "in", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_add_p:Opcode              = new Opcode(0xB5, "add_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_subtract_p:Opcode         = new Opcode(0xB6, "subtract_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_multiply_p:Opcode         = new Opcode(0xB7, "multiply_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_divide_p:Opcode           = new Opcode(0xB8, "divide_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_modulo_p:Opcode           = new Opcode(0xB9, "modulo_p", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBA:Opcode               = new Opcode(0xBA, "0xBA", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBB:Opcode               = new Opcode(0xBB, "0xBB", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBC:Opcode               = new Opcode(0xBC, "0xBC", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBD:Opcode               = new Opcode(0xBD, "0xBD", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBE:Opcode               = new Opcode(0xBE, "0xBE", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xBF:Opcode               = new Opcode(0xBF, "0xBF", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_increment_i:Opcode        = new Opcode(0xC0, "increment_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_decrement_i:Opcode        = new Opcode(0xC1, "decrement_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_inclocal_i:Opcode         = new Opcode(0xC2, "inclocal_i", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_declocal_i:Opcode         = new Opcode(0xC3, "declocal_i", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_negate_i:Opcode           = new Opcode(0xC4, "negate_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_add_i:Opcode              = new Opcode(0xC5, "add_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_subtract_i:Opcode         = new Opcode(0xC6, "subtract_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_multiply_i:Opcode         = new Opcode(0xC7, "multiply_i", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_0xC8:Opcode               = new Opcode(0xC8, "0xC8", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xC9:Opcode               = new Opcode(0xC9, "0xC9", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCA:Opcode               = new Opcode(0xCA, "0xCA", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCB:Opcode               = new Opcode(0xCB, "0xCB", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCC:Opcode               = new Opcode(0xCC, "0xCC", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCD:Opcode               = new Opcode(0xCD, "0xCD", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCE:Opcode               = new Opcode(0xCE, "0xCE", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xCF:Opcode               = new Opcode(0xCF, "0xCF", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_getlocal0:Opcode          = new Opcode(0xD0, "getlocal0", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getlocal1:Opcode          = new Opcode(0xD1, "getlocal1", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getlocal2:Opcode          = new Opcode(0xD2, "getlocal2", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_getlocal3:Opcode          = new Opcode(0xD3, "getlocal3", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_setlocal0:Opcode          = new Opcode(0xD4, "setlocal0", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_setlocal1:Opcode          = new Opcode(0xD5, "setlocal1", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_setlocal2:Opcode          = new Opcode(0xD6, "setlocal2", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_setlocal3:Opcode          = new Opcode(0xD7, "setlocal3", new <OpcodeArgumentType>[], new OpcodeConstructorBlocker());
		public static const OP_0xD8:Opcode               = new Opcode(0xD8, "0xD8", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xD9:Opcode               = new Opcode(0xD9, "0xD9", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDA:Opcode               = new Opcode(0xDA, "0xDA", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDB:Opcode               = new Opcode(0xDB, "0xDB", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDC:Opcode               = new Opcode(0xDC, "0xDC", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDD:Opcode               = new Opcode(0xDD, "0xDD", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDE:Opcode               = new Opcode(0xDE, "0xDE", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xDF:Opcode               = new Opcode(0xDF, "0xDF", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE0:Opcode               = new Opcode(0xE0, "0xE0", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE1:Opcode               = new Opcode(0xE1, "0xE1", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE2:Opcode               = new Opcode(0xE2, "0xE2", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE3:Opcode               = new Opcode(0xE3, "0xE3", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE4:Opcode               = new Opcode(0xE4, "0xE4", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE5:Opcode               = new Opcode(0xE5, "0xE5", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE6:Opcode               = new Opcode(0xE6, "0xE6", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE7:Opcode               = new Opcode(0xE7, "0xE7", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE8:Opcode               = new Opcode(0xE8, "0xE8", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xE9:Opcode               = new Opcode(0xE9, "0xE9", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xEA:Opcode               = new Opcode(0xEA, "0xEA", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xEB:Opcode               = new Opcode(0xEB, "0xEB", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xEC:Opcode               = new Opcode(0xEC, "0xEC", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xED:Opcode               = new Opcode(0xED, "0xED", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xEE:Opcode               = new Opcode(0xEE, "0xEE", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_debug:Opcode              = new Opcode(0xEF, "debug", new <OpcodeArgumentType>[OpcodeArgumentType.UByteLiteral, OpcodeArgumentType.String, OpcodeArgumentType.UByteLiteral, OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_debugline:Opcode          = new Opcode(0xF0, "debugline", new <OpcodeArgumentType>[OpcodeArgumentType.UIntLiteral], new OpcodeConstructorBlocker());
		public static const OP_debugfile:Opcode          = new Opcode(0xF1, "debugfile", new <OpcodeArgumentType>[OpcodeArgumentType.String], new OpcodeConstructorBlocker());
		public static const OP_bkptline:Opcode           = new Opcode(0xF2, "bkptline", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_timestamp:Opcode          = new Opcode(0xF3, "timestamp", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF4:Opcode               = new Opcode(0xF4, "0xF4", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF5:Opcode               = new Opcode(0xF5, "0xF5", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF6:Opcode               = new Opcode(0xF6, "0xF6", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF7:Opcode               = new Opcode(0xF7, "0xF7", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF8:Opcode               = new Opcode(0xF8, "0xF8", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xF9:Opcode               = new Opcode(0xF9, "0xF9", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFA:Opcode               = new Opcode(0xFA, "0xFA", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFB:Opcode               = new Opcode(0xFB, "0xFB", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFC:Opcode               = new Opcode(0xFC, "0xFC", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFD:Opcode               = new Opcode(0xFD, "0xFD", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFE:Opcode               = new Opcode(0xFE, "0xFE", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		public static const OP_0xFF:Opcode               = new Opcode(0xFF, "0xFF", new <OpcodeArgumentType>[OpcodeArgumentType.Unknown], new OpcodeConstructorBlocker());
		
		public static const codesByByte:Vector.<Opcode>  = new <Opcode>[OP_db, OP_bkpt, OP_nop, OP_throw, OP_getsuper, OP_setsuper, OP_dxns, OP_dxnslate, OP_kill, OP_label, OP_0x0A, OP_0x0B, OP_ifnlt, OP_ifnle, OP_ifngt, OP_ifnge, OP_jump, OP_iftrue, OP_iffalse, OP_ifeq, OP_ifne, OP_iflt, OP_ifle, OP_ifgt, OP_ifge, OP_ifstricteq, OP_ifstrictne, OP_lookupswitch, OP_pushwith, OP_popscope, OP_nextname, OP_hasnext, OP_pushnull, OP_pushundefined, OP_pushuninitialized, OP_nextvalue, OP_pushbyte, OP_pushshort, OP_pushtrue, OP_pushfalse, OP_pushnan, OP_pop, OP_dup, OP_swap, OP_pushstring, OP_pushint, OP_pushuint, OP_pushdouble, OP_pushscope, OP_pushnamespace, OP_hasnext2, OP_pushdecimal, OP_pushdnan, OP_li8, OP_li16, OP_li32, OP_lf32, OP_lf64, OP_si8, OP_si16, OP_si32, OP_sf32, OP_sf64, OP_0x3F, OP_newfunction, OP_call, OP_construct, OP_callmethod, OP_callstatic, OP_callsuper, OP_callproperty, OP_returnvoid, OP_returnvalue, OP_constructsuper, OP_constructprop, OP_callsuperid, OP_callproplex, OP_callinterface, OP_callsupervoid, OP_callpropvoid, OP_sxi1, OP_sxi8, OP_sxi16, OP_applytype, OP_0x54, OP_newobject, OP_newarray, OP_newactivation, OP_newclass, OP_getdescendants, OP_newcatch, OP_deldescendants, OP_0x5C, OP_findpropstrict, OP_findproperty, OP_finddef, OP_getlex, OP_setproperty, OP_getlocal, OP_setlocal, OP_getglobalscope, OP_getscopeobject, OP_getproperty, OP_getpropertylate, OP_initproperty, OP_setpropertylate, OP_deleteproperty, OP_deletepropertylate, OP_getslot, OP_setslot, OP_getglobalslot, OP_setglobalslot, OP_convert_s, OP_esc_xelem, OP_esc_xattr, OP_convert_i, OP_convert_u, OP_convert_d, OP_convert_b, OP_convert_o, OP_checkfilter, OP_convert_m, OP_convert_m_p, OP_0x7B, OP_0x7C, OP_0x7D, OP_0x7E, OP_0x7F, OP_coerce, OP_coerce_b, OP_coerce_a, OP_coerce_i, OP_coerce_d, OP_coerce_s, OP_astype, OP_astypelate, OP_coerce_u, OP_coerce_o, OP_0x8A, OP_0x8B, OP_0x8C, OP_0x8D, OP_0x8E, OP_negate_p, OP_negate, OP_increment, OP_inclocal, OP_decrement, OP_declocal, OP_typeof, OP_not, OP_bitnot, OP_0x98, OP_0x99, OP_concat, OP_add_d, OP_increment_p, OP_inclocal_p, OP_decrement_p, OP_declocal_p, OP_add, OP_subtract, OP_multiply, OP_divide, OP_modulo, OP_lshift, OP_rshift, OP_urshift, OP_bitand, OP_bitor, OP_bitxor, OP_equals, OP_strictequals, OP_lessthan, OP_lessequals, OP_greaterthan, OP_greaterequals, OP_instanceof, OP_istype, OP_istypelate, OP_in, OP_add_p, OP_subtract_p, OP_multiply_p, OP_divide_p, OP_modulo_p, OP_0xBA, OP_0xBB, OP_0xBC, OP_0xBD, OP_0xBE, OP_0xBF, OP_increment_i, OP_decrement_i, OP_inclocal_i, OP_declocal_i, OP_negate_i, OP_add_i, OP_subtract_i, OP_multiply_i, OP_0xC8, OP_0xC9, OP_0xCA, OP_0xCB, OP_0xCC, OP_0xCD, OP_0xCE, OP_0xCF, OP_getlocal0, OP_getlocal1, OP_getlocal2, OP_getlocal3, OP_setlocal0, OP_setlocal1, OP_setlocal2, OP_setlocal3, OP_0xD8, OP_0xD9, OP_0xDA, OP_0xDB, OP_0xDC, OP_0xDD, OP_0xDE, OP_0xDF, OP_0xE0, OP_0xE1, OP_0xE2, OP_0xE3, OP_0xE4, OP_0xE5, OP_0xE6, OP_0xE7, OP_0xE8, OP_0xE9, OP_0xEA, OP_0xEB, OP_0xEC, OP_0xED, OP_0xEE, OP_debug, OP_debugline, OP_debugfile, OP_bkptline, OP_timestamp, OP_0xF4, OP_0xF5, OP_0xF6, OP_0xF7, OP_0xF8, OP_0xF9, OP_0xFA, OP_0xFB, OP_0xFC, OP_0xFD, OP_0xFE, OP_0xFF,];
		public static const codesByName:Object = new Object();

		// Gets the Opcode associated with the passed in string, int, or uint
		public static function fromInfo(info:*):Opcode
		{
			if (info is String)
			{
				return codesByName[info];
			}
			if (info is int || info is uint)
			{
				return codesByByte[info];
			}

			throw new Error("Opcode can only be found by byte value or by name");
		}
		
		private var _instrVal:int;
		private var _instrName:String;
		private var _argTypes:Vector.<OpcodeArgumentType>;
		
		public function get val():int  { return _instrVal; }
		
		public function get name():String  { return _instrName; }
		
		public function get arguments():Vector.<OpcodeArgumentType>  { return _argTypes; }

        public function get stopsExecution():Boolean
        {
            return this == OP_returnvalue || this == OP_returnvoid || this == OP_throw || this == OP_jump || this == OP_lookupswitch;
        }

        public function get usable():Boolean { return !this._argTypes.some(function(argType:OpcodeArgumentType):Boolean { return argType == OpcodeArgumentType.Unknown; }); }
		
		public function Opcode(val:int, name:String, argTypes:Vector.<OpcodeArgumentType>, constructorBlocker:OpcodeConstructorBlocker)
		{
			if (constructorBlocker == null)
			{
				throw new Error("Do not use the Opcode constructor");
			}
			this._instrVal = val;
			this._instrName = name;
			this._argTypes = argTypes;
            this._argTypes.fixed = true;
		}

        // Static initializer
		{
			codesByByte.fixed = true;
            codesByName["db"] = OP_db;
            codesByName["bkpt"] = OP_bkpt;
            codesByName["nop"] = OP_nop;
            codesByName["throw"] = OP_throw;
            codesByName["getsuper"] = OP_getsuper;
            codesByName["setsuper"] = OP_setsuper;
            codesByName["dxns"] = OP_dxns;
            codesByName["dxnslate"] = OP_dxnslate;
            codesByName["kill"] = OP_kill;
            codesByName["label"] = OP_label;
            codesByName["0x0A"] = OP_0x0A;
            codesByName["0x0B"] = OP_0x0B;
            codesByName["ifnlt"] = OP_ifnlt;
            codesByName["ifnle"] = OP_ifnle;
            codesByName["ifngt"] = OP_ifngt;
            codesByName["ifnge"] = OP_ifnge;
            codesByName["jump"] = OP_jump;
            codesByName["iftrue"] = OP_iftrue;
            codesByName["iffalse"] = OP_iffalse;
            codesByName["ifeq"] = OP_ifeq;
            codesByName["ifne"] = OP_ifne;
            codesByName["iflt"] = OP_iflt;
            codesByName["ifle"] = OP_ifle;
            codesByName["ifgt"] = OP_ifgt;
            codesByName["ifge"] = OP_ifge;
            codesByName["ifstricteq"] = OP_ifstricteq;
            codesByName["ifstrictne"] = OP_ifstrictne;
            codesByName["lookupswitch"] = OP_lookupswitch;
            codesByName["pushwith"] = OP_pushwith;
            codesByName["popscope"] = OP_popscope;
            codesByName["nextname"] = OP_nextname;
            codesByName["hasnext"] = OP_hasnext;
            codesByName["pushnull"] = OP_pushnull;
            codesByName["pushundefined"] = OP_pushundefined;
            codesByName["pushuninitialized"] = OP_pushuninitialized;
            codesByName["nextvalue"] = OP_nextvalue;
            codesByName["pushbyte"] = OP_pushbyte;
            codesByName["pushshort"] = OP_pushshort;
            codesByName["pushtrue"] = OP_pushtrue;
            codesByName["pushfalse"] = OP_pushfalse;
            codesByName["pushnan"] = OP_pushnan;
            codesByName["pop"] = OP_pop;
            codesByName["dup"] = OP_dup;
            codesByName["swap"] = OP_swap;
            codesByName["pushstring"] = OP_pushstring;
            codesByName["pushint"] = OP_pushint;
            codesByName["pushuint"] = OP_pushuint;
            codesByName["pushdouble"] = OP_pushdouble;
            codesByName["pushscope"] = OP_pushscope;
            codesByName["pushnamespace"] = OP_pushnamespace;
            codesByName["hasnext2"] = OP_hasnext2;
            codesByName["pushdecimal"] = OP_pushdecimal;
            codesByName["pushdnan"] = OP_pushdnan;
            codesByName["li8"] = OP_li8;
            codesByName["li16"] = OP_li16;
            codesByName["li32"] = OP_li32;
            codesByName["lf32"] = OP_lf32;
            codesByName["lf64"] = OP_lf64;
            codesByName["si8"] = OP_si8;
            codesByName["si16"] = OP_si16;
            codesByName["si32"] = OP_si32;
            codesByName["sf32"] = OP_sf32;
            codesByName["sf64"] = OP_sf64;
            codesByName["0x3F"] = OP_0x3F;
            codesByName["newfunction"] = OP_newfunction;
            codesByName["call"] = OP_call;
            codesByName["construct"] = OP_construct;
            codesByName["callmethod"] = OP_callmethod;
            codesByName["callstatic"] = OP_callstatic;
            codesByName["callsuper"] = OP_callsuper;
            codesByName["callproperty"] = OP_callproperty;
            codesByName["returnvoid"] = OP_returnvoid;
            codesByName["returnvalue"] = OP_returnvalue;
            codesByName["constructsuper"] = OP_constructsuper;
            codesByName["constructprop"] = OP_constructprop;
            codesByName["callsuperid"] = OP_callsuperid;
            codesByName["callproplex"] = OP_callproplex;
            codesByName["callinterface"] = OP_callinterface;
            codesByName["callsupervoid"] = OP_callsupervoid;
            codesByName["callpropvoid"] = OP_callpropvoid;
            codesByName["sxi1"] = OP_sxi1;
            codesByName["sxi8"] = OP_sxi8;
            codesByName["sxi16"] = OP_sxi16;
            codesByName["applytype"] = OP_applytype;
            codesByName["0x54"] = OP_0x54;
            codesByName["newobject"] = OP_newobject;
            codesByName["newarray"] = OP_newarray;
            codesByName["newactivation"] = OP_newactivation;
            codesByName["newclass"] = OP_newclass;
            codesByName["getdescendants"] = OP_getdescendants;
            codesByName["newcatch"] = OP_newcatch;
            codesByName["deldescendants"] = OP_deldescendants;
            codesByName["0x5C"] = OP_0x5C;
            codesByName["findpropstrict"] = OP_findpropstrict;
            codesByName["findproperty"] = OP_findproperty;
            codesByName["finddef"] = OP_finddef;
            codesByName["getlex"] = OP_getlex;
            codesByName["setproperty"] = OP_setproperty;
            codesByName["getlocal"] = OP_getlocal;
            codesByName["setlocal"] = OP_setlocal;
            codesByName["getglobalscope"] = OP_getglobalscope;
            codesByName["getscopeobject"] = OP_getscopeobject;
            codesByName["getproperty"] = OP_getproperty;
            codesByName["getpropertylate"] = OP_getpropertylate;
            codesByName["initproperty"] = OP_initproperty;
            codesByName["setpropertylate"] = OP_setpropertylate;
            codesByName["deleteproperty"] = OP_deleteproperty;
            codesByName["deletepropertylate"] = OP_deletepropertylate;
            codesByName["getslot"] = OP_getslot;
            codesByName["setslot"] = OP_setslot;
            codesByName["getglobalslot"] = OP_getglobalslot;
            codesByName["setglobalslot"] = OP_setglobalslot;
            codesByName["convert_s"] = OP_convert_s;
            codesByName["esc_xelem"] = OP_esc_xelem;
            codesByName["esc_xattr"] = OP_esc_xattr;
            codesByName["convert_i"] = OP_convert_i;
            codesByName["convert_u"] = OP_convert_u;
            codesByName["convert_d"] = OP_convert_d;
            codesByName["convert_b"] = OP_convert_b;
            codesByName["convert_o"] = OP_convert_o;
            codesByName["checkfilter"] = OP_checkfilter;
            codesByName["convert_m"] = OP_convert_m;
            codesByName["convert_m_p"] = OP_convert_m_p;
            codesByName["0x7B"] = OP_0x7B;
            codesByName["0x7C"] = OP_0x7C;
            codesByName["0x7D"] = OP_0x7D;
            codesByName["0x7E"] = OP_0x7E;
            codesByName["0x7F"] = OP_0x7F;
            codesByName["coerce"] = OP_coerce;
            codesByName["coerce_b"] = OP_coerce_b;
            codesByName["coerce_a"] = OP_coerce_a;
            codesByName["coerce_i"] = OP_coerce_i;
            codesByName["coerce_d"] = OP_coerce_d;
            codesByName["coerce_s"] = OP_coerce_s;
            codesByName["astype"] = OP_astype;
            codesByName["astypelate"] = OP_astypelate;
            codesByName["coerce_u"] = OP_coerce_u;
            codesByName["coerce_o"] = OP_coerce_o;
            codesByName["0x8A"] = OP_0x8A;
            codesByName["0x8B"] = OP_0x8B;
            codesByName["0x8C"] = OP_0x8C;
            codesByName["0x8D"] = OP_0x8D;
            codesByName["0x8E"] = OP_0x8E;
            codesByName["negate_p"] = OP_negate_p;
            codesByName["negate"] = OP_negate;
            codesByName["increment"] = OP_increment;
            codesByName["inclocal"] = OP_inclocal;
            codesByName["decrement"] = OP_decrement;
            codesByName["declocal"] = OP_declocal;
            codesByName["typeof"] = OP_typeof;
            codesByName["not"] = OP_not;
            codesByName["bitnot"] = OP_bitnot;
            codesByName["0x98"] = OP_0x98;
            codesByName["0x99"] = OP_0x99;
            codesByName["concat"] = OP_concat;
            codesByName["add_d"] = OP_add_d;
            codesByName["increment_p"] = OP_increment_p;
            codesByName["inclocal_p"] = OP_inclocal_p;
            codesByName["decrement_p"] = OP_decrement_p;
            codesByName["declocal_p"] = OP_declocal_p;
            codesByName["add"] = OP_add;
            codesByName["subtract"] = OP_subtract;
            codesByName["multiply"] = OP_multiply;
            codesByName["divide"] = OP_divide;
            codesByName["modulo"] = OP_modulo;
            codesByName["lshift"] = OP_lshift;
            codesByName["rshift"] = OP_rshift;
            codesByName["urshift"] = OP_urshift;
            codesByName["bitand"] = OP_bitand;
            codesByName["bitor"] = OP_bitor;
            codesByName["bitxor"] = OP_bitxor;
            codesByName["equals"] = OP_equals;
            codesByName["strictequals"] = OP_strictequals;
            codesByName["lessthan"] = OP_lessthan;
            codesByName["lessequals"] = OP_lessequals;
            codesByName["greaterthan"] = OP_greaterthan;
            codesByName["greaterequals"] = OP_greaterequals;
            codesByName["instanceof"] = OP_instanceof;
            codesByName["istype"] = OP_istype;
            codesByName["istypelate"] = OP_istypelate;
            codesByName["in"] = OP_in;
            codesByName["add_p"] = OP_add_p;
            codesByName["subtract_p"] = OP_subtract_p;
            codesByName["multiply_p"] = OP_multiply_p;
            codesByName["divide_p"] = OP_divide_p;
            codesByName["modulo_p"] = OP_modulo_p;
            codesByName["0xBA"] = OP_0xBA;
            codesByName["0xBB"] = OP_0xBB;
            codesByName["0xBC"] = OP_0xBC;
            codesByName["0xBD"] = OP_0xBD;
            codesByName["0xBE"] = OP_0xBE;
            codesByName["0xBF"] = OP_0xBF;
            codesByName["increment_i"] = OP_increment_i;
            codesByName["decrement_i"] = OP_decrement_i;
            codesByName["inclocal_i"] = OP_inclocal_i;
            codesByName["declocal_i"] = OP_declocal_i;
            codesByName["negate_i"] = OP_negate_i;
            codesByName["add_i"] = OP_add_i;
            codesByName["subtract_i"] = OP_subtract_i;
            codesByName["multiply_i"] = OP_multiply_i;
            codesByName["0xC8"] = OP_0xC8;
            codesByName["0xC9"] = OP_0xC9;
            codesByName["0xCA"] = OP_0xCA;
            codesByName["0xCB"] = OP_0xCB;
            codesByName["0xCC"] = OP_0xCC;
            codesByName["0xCD"] = OP_0xCD;
            codesByName["0xCE"] = OP_0xCE;
            codesByName["0xCF"] = OP_0xCF;
            codesByName["getlocal0"] = OP_getlocal0;
            codesByName["getlocal1"] = OP_getlocal1;
            codesByName["getlocal2"] = OP_getlocal2;
            codesByName["getlocal3"] = OP_getlocal3;
            codesByName["setlocal0"] = OP_setlocal0;
            codesByName["setlocal1"] = OP_setlocal1;
            codesByName["setlocal2"] = OP_setlocal2;
            codesByName["setlocal3"] = OP_setlocal3;
            codesByName["0xD8"] = OP_0xD8;
            codesByName["0xD9"] = OP_0xD9;
            codesByName["0xDA"] = OP_0xDA;
            codesByName["0xDB"] = OP_0xDB;
            codesByName["0xDC"] = OP_0xDC;
            codesByName["0xDD"] = OP_0xDD;
            codesByName["0xDE"] = OP_0xDE;
            codesByName["0xDF"] = OP_0xDF;
            codesByName["0xE0"] = OP_0xE0;
            codesByName["0xE1"] = OP_0xE1;
            codesByName["0xE2"] = OP_0xE2;
            codesByName["0xE3"] = OP_0xE3;
            codesByName["0xE4"] = OP_0xE4;
            codesByName["0xE5"] = OP_0xE5;
            codesByName["0xE6"] = OP_0xE6;
            codesByName["0xE7"] = OP_0xE7;
            codesByName["0xE8"] = OP_0xE8;
            codesByName["0xE9"] = OP_0xE9;
            codesByName["0xEA"] = OP_0xEA;
            codesByName["0xEB"] = OP_0xEB;
            codesByName["0xEC"] = OP_0xEC;
            codesByName["0xED"] = OP_0xED;
            codesByName["0xEE"] = OP_0xEE;
            codesByName["debug"] = OP_debug;
            codesByName["debugline"] = OP_debugline;
            codesByName["debugfile"] = OP_debugfile;
            codesByName["bkptline"] = OP_bkptline;
            codesByName["timestamp"] = OP_timestamp;
            codesByName["0xF4"] = OP_0xF4;
            codesByName["0xF5"] = OP_0xF5;
            codesByName["0xF6"] = OP_0xF6;
            codesByName["0xF7"] = OP_0xF7;
            codesByName["0xF8"] = OP_0xF8;
            codesByName["0xF9"] = OP_0xF9;
            codesByName["0xFA"] = OP_0xFA;
            codesByName["0xFB"] = OP_0xFB;
            codesByName["0xFC"] = OP_0xFC;
            codesByName["0xFD"] = OP_0xFD;
            codesByName["0xFE"] = OP_0xFE;
            codesByName["0xFF"] = OP_0xFF;
		}
	}
}

class OpcodeConstructorBlocker
{
}
